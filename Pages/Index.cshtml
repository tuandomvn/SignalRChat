@page
@model IndexModel

@{
    ViewData["Title"] = "Chat with Support";
}

<div class="container">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card mt-4">
                <div class="card-header">
                    <h3 class="card-title">Chat with Support</h3>
                </div>
                <div class="card-body">
                    <div id="connectionStatus" class="alert alert-info mb-3">
                        Please enter your name and click "Connect to Agent" to start chatting.
                    </div>

                    <div id="userInfoArea" class="mb-3">
                        <div class="form-group mb-3">
                            <input type="text" class="form-control" id="userName" placeholder="Enter your name">
                            <div id="nameError" class="invalid-feedback">
                                Please enter your name before connecting.
                            </div>
                        </div>
                        <button class="btn btn-primary" type="button" id="connectButton">
                            Connect to Agent
                        </button>
                    </div>

                    <div id="chatArea" class="mb-3">
                        <div id="messagesList" class="border rounded p-3 mb-3" style="height: 400px; overflow-y: auto;">
                        </div>
                        
                        <div class="input-group" style="display: none;" id="messageInputGroup">
                            <input type="text" class="form-control" id="messageInput" placeholder="Type your message...">
                            <button class="btn btn-primary" type="button" id="sendButton">Send</button>
                        </div>
                        <div class="mt-3" id="endSessionArea" style="display: none;">
                            <button class="btn btn-danger" type="button" id="endSessionButton">End Chat Session</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .withAutomaticReconnect()
            .build();

        const userInfoArea = document.getElementById("userInfoArea");
        const userName = document.getElementById("userName");
        const nameError = document.getElementById("nameError");
        const connectButton = document.getElementById("connectButton");
        const messageInputGroup = document.getElementById("messageInputGroup");
        const messageInput = document.getElementById("messageInput");
        const sendButton = document.getElementById("sendButton");
        const messagesList = document.getElementById("messagesList");
        const connectionStatus = document.getElementById("connectionStatus");
        const endSessionButton = document.getElementById("endSessionButton");
        const endSessionArea = document.getElementById("endSessionArea");
        let isConnected = false;
        let currentUserName = "";
        let currentChatId = null;

        connectButton.addEventListener("click", async () => {
            if (!isConnected) {
                const name = userName.value.trim();
                if (!name) {
                    userName.classList.add("is-invalid");
                    nameError.style.display = "block";
                    return;
                }

                try {
                    // Check connection state and start if needed
                    if (connection.state === signalR.HubConnectionState.Disconnected) {
                        await connection.start();
                    }
                    
                    currentUserName = name;
                    
                    // Try to connect 3 times
                    let attempts = 0;
                    const maxAttempts = 3;
                    let connected = false;

                    while (attempts <= maxAttempts && !connected) {
                        attempts++;
                        connectionStatus.className = "alert alert-info";
                        connectionStatus.textContent = `Attempting to connect (${attempts}/${maxAttempts})...`;
                        
                        const result = await connection.invoke("AttemptToConnect", name);
                        if (!result) {
                            break;
                        }

                        if(result && attempts == maxAttempts)
                        {
                            connected = true;
                            break;
                        }
                        
                        if (attempts < maxAttempts) {
                            // Wait for 1 seconds before next attempt
                            await new Promise(resolve => setTimeout(resolve, 1000));
                        }
                    }

                    if (!connected) {
                        connectionStatus.className = "alert alert-danger";
                        connectionStatus.textContent = "Failed to complete connection attempts. Please try again.";
                        return;
                    }

                    // If all attempts are successful, start the chat
                    const chatResult = await connection.invoke("StartChat", name);
                    if (chatResult && chatResult.chatId) {
                        currentChatId = chatResult.chatId;
                        console.log("Chat started with ID:", currentChatId);
                    }
                } catch (err) {
                    console.error(err);
                    connectionStatus.className = "alert alert-danger";
                    connectionStatus.textContent = "Failed to connect to chat. Please try again.";
                }
            }
        });

        endSessionButton.addEventListener("click", async () => {
            console.log("End session button clicked, currentChatId:", currentChatId, "isConnected:", isConnected);
            if (currentChatId && isConnected) {
                try {
                    await connection.invoke("EndChat", currentChatId);
                    console.log("EndChat invoked successfully");
                    
                    // Reset UI state
                    userInfoArea.style.display = "block";
                    messageInputGroup.style.display = "none";
                    endSessionArea.style.display = "none";
                    isConnected = false;
                    currentChatId = null;
                    userName.value = "";
                    currentUserName = "";
                    
                    // Update connection status
                    connectionStatus.className = "alert alert-info";
                    connectionStatus.textContent = "Chat session ended. You can start a new chat session.";
                } catch (err) {
                    console.error("Error ending chat:", err);
                    addMessage("System", "Failed to end chat session. Please try again.");
                }
            } else {
                console.log("Cannot end chat - currentChatId or isConnected is invalid");
                addMessage("System", "Cannot end chat session. Please try reconnecting.");
            }
        });

        userName.addEventListener("input", () => {
            userName.classList.remove("is-invalid");
            nameError.style.display = "none";
        });

        sendButton.addEventListener("click", async () => {
            const message = messageInput.value;
            if (message && isConnected) {
                try {
                    await connection.invoke("SendMessage", currentUserName, message);
                    messageInput.value = "";
                } catch (err) {
                    console.error(err);
                    addMessage("System", "Failed to send message. Please try again.");
                }
            }
        });

        messageInput.addEventListener("keypress", (event) => {
            if (event.key === "Enter") {
                event.preventDefault();
                sendButton.click();
            }
        });

        function addMessage(user, message) {
            const messageDiv = document.createElement("div");
            messageDiv.className = "mb-2";
            messageDiv.textContent = `${user}: ${message}`;
            messagesList.appendChild(messageDiv);
            messagesList.scrollTop = messagesList.scrollHeight;
        }

        connection.on("ReceiveMessage", (user, message) => {
            addMessage(user, message);
        });

        connection.on("ChatAssigned", (message) => {
            connectionStatus.className = "alert alert-success";
            connectionStatus.textContent = message;
            
            // Clear old chat messages
            messagesList.innerHTML = '';
            
            // Show chat interface
            userInfoArea.style.display = "none";
            messageInputGroup.style.display = "flex";
            endSessionArea.style.display = "block";
            document.getElementById("chatArea").style.display = "block";
            isConnected = true;
            console.log("Chat assigned, isConnected set to true");
        });

        connection.on("NoChatAssigned", (message) => {
            connectionStatus.className = "alert alert-warning";
            connectionStatus.textContent = message;
            if (message.includes("complete all connection attempts")) {
                // Don't hide chat area if we need more attempts
                return;
            }
            document.getElementById("chatArea").style.display = "none";
            userInfoArea.style.display = "block";
            isConnected = false;
            currentChatId = null;
            currentUserName = "";
            console.log("No chat assigned, isConnected set to false");
        });

        connection.on("NewChat", ({ chatId }) => {
            currentChatId = chatId;
            console.log("New chat started with ID:", chatId);
        });

        connection.on("ChatEnded", (data) => {
            console.log("Chat ended event received:", data);
            
            // Extract message from the data
            const message = data.message || 'Chat session has ended';
            
            connectionStatus.className = "alert alert-info";
            connectionStatus.textContent = message;
            userInfoArea.style.display = "block";
            messageInputGroup.style.display = "none";
            endSessionArea.style.display = "none";
            isConnected = false;
            currentChatId = null;
            userName.value = "";
            currentUserName = "";
            
            // Add a final system message
            addMessage("System", message);
        });
    </script>
}
