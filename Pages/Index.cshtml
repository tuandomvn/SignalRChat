@page
@model IndexModel

@{
    ViewData["Title"] = "Chat with Support";
}

<div class="container">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card mt-4">
                <div class="card-header">
                    <h3 class="card-title">Chat with Support</h3>
                </div>
                <div class="card-body">
                    <div id="connectionStatus" class="alert alert-info mb-3">
                        Please enter your name and click "Connect to Agent" to start chatting.
                    </div>

                    <div id="userInfoArea" class="mb-3">
                        <div class="form-group mb-3">
                            <input type="text" class="form-control" id="userName" placeholder="Enter your name">
                            <div id="nameError" class="invalid-feedback">
                                Please enter your name before connecting.
                            </div>
                        </div>
                        <button class="btn btn-primary" type="button" id="connectButton">
                            Connect to Agent
                        </button>
                    </div>

                    <div id="chatArea" class="mb-3">
                        <div id="messagesList" class="border rounded p-3 mb-3" style="height: 400px; overflow-y: auto;">
                        </div>
                        
                        <div class="input-group" style="display: none;" id="messageInputGroup">
                            <input type="text" class="form-control" id="messageInput" placeholder="Type your message...">
                            <button class="btn btn-primary" type="button" id="sendButton">Send</button>
                        </div>
                        <div class="mt-3" id="endSessionArea" style="display: none;">
                            <button class="btn btn-danger" type="button" id="endSessionButton">End Chat Session</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .withAutomaticReconnect()
            .build();

        const userInfoArea = document.getElementById("userInfoArea");
        const userName = document.getElementById("userName");
        const nameError = document.getElementById("nameError");
        const connectButton = document.getElementById("connectButton");
        const messageInputGroup = document.getElementById("messageInputGroup");
        const messageInput = document.getElementById("messageInput");
        const sendButton = document.getElementById("sendButton");
        const messagesList = document.getElementById("messagesList");
        const connectionStatus = document.getElementById("connectionStatus");
        const endSessionButton = document.getElementById("endSessionButton");
        const endSessionArea = document.getElementById("endSessionArea");
        let isConnected = false;
        let currentUserName = "";
        let currentChatId = null;

        connectButton.addEventListener("click", async () => {
            if (!isConnected) {
                const name = userName.value.trim();
                if (!name) {
                    userName.classList.add("is-invalid");
                    nameError.style.display = "block";
                    return;
                }

                try {
                    await connection.start();
                    currentUserName = name;
                    await connection.invoke("StartChat", name);
                    userInfoArea.style.display = "none";
                    messageInputGroup.style.display = "flex";
                    endSessionArea.style.display = "block";
                    isConnected = true;
                } catch (err) {
                    console.error(err);
                    connectionStatus.className = "alert alert-danger";
                    connectionStatus.textContent = "Failed to connect to chat. Please try again.";
                }
            }
        });

        endSessionButton.addEventListener("click", async () => {
            if (currentChatId && isConnected) {
                try {
                    await connection.invoke("EndChat", currentChatId);
                    addMessage("System", "You have ended the chat session");
                } catch (err) {
                    console.error("Error ending chat:", err);
                    addMessage("System", "Failed to end chat session. Please try again.");
                }
            }
        });

        userName.addEventListener("input", () => {
            userName.classList.remove("is-invalid");
            nameError.style.display = "none";
        });

        sendButton.addEventListener("click", async () => {
            const message = messageInput.value;
            if (message && isConnected) {
                try {
                    await connection.invoke("SendMessage", currentUserName, message);
                    messageInput.value = "";
                } catch (err) {
                    console.error(err);
                    addMessage("System", "Failed to send message. Please try again.");
                }
            }
        });

        messageInput.addEventListener("keypress", (event) => {
            if (event.key === "Enter") {
                event.preventDefault();
                sendButton.click();
            }
        });

        function addMessage(user, message) {
            const messageDiv = document.createElement("div");
            messageDiv.className = "mb-2";
            messageDiv.textContent = `${user}: ${message}`;
            messagesList.appendChild(messageDiv);
            messagesList.scrollTop = messagesList.scrollHeight;
        }

        connection.on("ReceiveMessage", (user, message) => {
            addMessage(user, message);
        });

        connection.on("ChatAssigned", (message) => {
            connectionStatus.className = "alert alert-success";
            connectionStatus.textContent = message;
        });

        connection.on("NewChat", ({ chatId }) => {
            currentChatId = chatId;
        });

        connection.on("ChatEnded", (message) => {
            connectionStatus.className = "alert alert-info";
            connectionStatus.textContent = message;
            userInfoArea.style.display = "block";
            messageInputGroup.style.display = "none";
            endSessionArea.style.display = "none";
            isConnected = false;
            currentChatId = null;
            userName.value = "";
            currentUserName = "";
            
            // Add a final system message
            addMessage("System", message);
            
            // Reload the page after a short delay
            setTimeout(() => {
                location.reload();
            }, 3000);
        });

        window.onbeforeunload = async () => {
            if (isConnected) {
                try {
                    await connection.stop();
                } catch (err) {
                    console.error(err);
                }
            }
        };
    </script>
}
